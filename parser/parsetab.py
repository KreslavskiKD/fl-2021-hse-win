
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsALPHABET ARROW BLOCKEND BLOCKSTART CHAR CLASS CLASSNAME COMMA COMPAREOPERATOR DEADEND DEF ELSE EQUALITY FROM FUN ID INT ITSELF LOGICOPERATOR METHOD OVERRIDE PAREND PARSTART RETURN START STRING TERMINAL TYPIZATIONexpressions : expression\n                   | expression expressionsexpression : classdef\n                  | automaton\n                  | alphabet\n                  empty :alphabet : DEF ID TYPIZATION CLASSNAME EQUALITY BLOCKSTART enumeration BLOCKEND\n                | DEF ID TYPIZATION CLASSNAME EQUALITY CLASSNAME METHOD PARSTART enumeration PAREND\n                | DEF ID TYPIZATION CLASSNAME EQUALITY CLASSNAME METHOD BLOCKSTART alphabetdescribebody BLOCKEND\n                 enumeration : term\n                   | term COMMA enumeration\n                   term : CHAR\n            | INT\n            | STRING\n            | ID\n            | CLASSNAME PARSTART enumeration PAREND\n            alphabetdescribebody : paramsdescribe\n                            | paramsdescribe COMMA alphabetdescribebody\n                            paramsdescribe : enumeration FROM IDtransitionterm : CHAR\n                      | INT\n                      | STRING\n                      | CLASSNAME PARSTART enumeration PAREND\n                      transitionkeyword : ELSE\n                         | DEADEND\n                         | ALPHABET\n                         | ITSELF\n                         transitionlist : transitionterm\n                      | transitionkeyword\n                      | transitionterm COMMA transitionlist\n                      | transitionkeyword COMMA transitionlist\n                      transition : transitionlist ARROW ID\n                  | transitionlist ARROW transitionkeyword\n                  automaton : DEF ID TYPIZATION CLASSNAME EQUALITY CLASSNAME METHOD PARSTART ID PAREND METHOD BLOCKSTART automatondescribebody BLOCKENDautomatondescribebody : START statedescription states TERMINAL BLOCKSTART termstates BLOCKENDstatedescription : transition statedescription\n                        | transition\n                        states : states ID statedescription\n              | ID statedescription\n              | empty\n              termstates : termstates ID statedescription\n                  | ID statedescription\n                  | empty\n                  classdef : CLASS CLASSNAME PARSTART fields PAREND TYPIZATION CLASSNAME BLOCKSTART classbody BLOCKENDfield : ID TYPIZATION CLASSNAME\n             | ID TYPIZATION CLASSNAME EQUALITY transitionterm\n             fields : field\n              | field COMMA fields\n              classbody : method\n                 | method classbody\n                 method : OVERRIDE FUN ID PARSTART fields PAREND TYPIZATION CLASSNAME BLOCKSTART RETURN PARSTART logicoperations PAREND BLOCKENDcompareoperation : ID METHOD COMPAREOPERATOR ID METHODlogicoperations : compareoperation\n                       | PARSTART logicoperations PAREND\n                       | logicoperations LOGICOPERATOR PARSTART compareoperation PAREND\n                       '
    
_lr_action_items = {'CLASS':([0,2,3,4,5,45,58,63,64,79,],[6,6,-3,-4,-5,-7,-44,-8,-9,-34,]),'DEF':([0,2,3,4,5,45,58,63,64,79,],[7,7,-3,-4,-5,-7,-44,-8,-9,-34,]),'$end':([1,2,3,4,5,8,45,58,63,64,79,],[0,-1,-3,-4,-5,-2,-7,-44,-8,-9,-34,]),'CLASSNAME':([6,12,19,20,21,25,27,42,43,44,46,50,65,77,81,85,86,87,88,89,91,95,96,99,101,102,110,114,],[9,16,23,24,26,30,37,30,30,30,30,30,30,37,37,-24,-25,-26,-27,97,37,37,37,37,-32,-33,37,37,]),'ID':([7,11,18,25,42,43,44,46,50,60,65,66,73,80,81,85,86,87,88,90,92,93,94,100,101,102,106,107,109,111,112,115,117,120,125,128,],[10,15,15,29,51,29,29,29,29,68,29,72,15,91,-37,-24,-25,-26,-27,99,-40,-36,101,-39,-32,-33,110,-38,114,-43,116,-42,116,-41,129,116,]),'PARSTART':([9,28,30,37,68,108,112,117,124,],[11,42,44,50,73,112,117,117,128,]),'TYPIZATION':([10,15,17,78,],[12,19,21,89,]),'PAREND':([13,14,22,23,29,32,33,34,35,38,39,40,41,51,52,56,57,61,67,69,75,118,119,122,126,130,131,132,],[17,-47,-48,-45,-15,-10,-12,-13,-14,-46,-20,-21,-22,62,63,67,-11,69,-16,-23,78,123,-53,126,-54,132,-52,-55,]),'COMMA':([14,23,29,32,33,34,35,38,39,40,41,51,54,67,69,72,83,84,85,86,87,88,],[18,-45,-15,46,-12,-13,-14,-46,-20,-21,-22,-15,65,-16,-23,-19,95,96,-24,-25,-26,-27,]),'EQUALITY':([16,23,],[20,27,]),'BLOCKSTART':([20,26,28,70,97,98,],[25,36,43,74,105,106,]),'METHOD':([24,62,116,129,],[28,70,121,131,]),'CHAR':([25,27,42,43,44,46,50,65,77,81,85,86,87,88,91,95,96,99,101,102,110,114,],[33,39,33,33,33,33,33,33,39,39,-24,-25,-26,-27,39,39,39,39,-32,-33,39,39,]),'INT':([25,27,42,43,44,46,50,65,77,81,85,86,87,88,91,95,96,99,101,102,110,114,],[34,40,34,34,34,34,34,34,40,40,-24,-25,-26,-27,40,40,40,40,-32,-33,40,40,]),'STRING':([25,27,42,43,44,46,50,65,77,81,85,86,87,88,91,95,96,99,101,102,110,114,],[35,41,35,35,35,35,35,35,41,41,-24,-25,-26,-27,41,41,41,41,-32,-33,41,41,]),'BLOCKEND':([29,31,32,33,34,35,47,48,53,54,57,59,67,71,72,76,81,85,86,87,88,93,101,102,106,109,111,113,115,120,123,127,],[-15,45,-10,-12,-13,-14,58,-49,64,-17,-11,-50,-16,-18,-19,79,-37,-24,-25,-26,-27,-36,-32,-33,-6,113,-43,-35,-42,-41,127,-51,]),'FROM':([29,32,33,34,35,55,57,67,],[-15,-10,-12,-13,-14,66,-11,-16,]),'OVERRIDE':([36,48,127,],[49,49,-51,]),'ARROW':([39,40,41,69,82,83,84,85,86,87,88,103,104,],[-20,-21,-22,-23,94,-29,-28,-24,-25,-26,-27,-31,-30,]),'FUN':([49,],[60,]),'START':([74,],[77,]),'ELSE':([77,81,85,86,87,88,91,94,95,96,99,101,102,110,114,],[85,85,-24,-25,-26,-27,85,85,85,85,85,-32,-33,85,85,]),'DEADEND':([77,81,85,86,87,88,91,94,95,96,99,101,102,110,114,],[86,86,-24,-25,-26,-27,86,86,86,86,86,-32,-33,86,86,]),'ALPHABET':([77,81,85,86,87,88,91,94,95,96,99,101,102,110,114,],[87,87,-24,-25,-26,-27,87,87,87,87,87,-32,-33,87,87,]),'ITSELF':([77,81,85,86,87,88,91,94,95,96,99,101,102,110,114,],[88,88,-24,-25,-26,-27,88,88,88,88,88,-32,-33,88,88,]),'TERMINAL':([80,81,85,86,87,88,90,92,93,100,101,102,107,],[-6,-37,-24,-25,-26,-27,98,-40,-36,-39,-32,-33,-38,]),'RETURN':([105,],[108,]),'LOGICOPERATOR':([118,119,122,126,131,132,],[124,-53,124,-54,-52,-55,]),'COMPAREOPERATOR':([121,],[125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,2,],[1,8,]),'expression':([0,2,],[2,2,]),'classdef':([0,2,],[3,3,]),'automaton':([0,2,],[4,4,]),'alphabet':([0,2,],[5,5,]),'fields':([11,18,73,],[13,22,75,]),'field':([11,18,73,],[14,14,14,]),'enumeration':([25,42,43,44,46,50,65,],[31,52,55,56,57,61,55,]),'term':([25,42,43,44,46,50,65,],[32,32,32,32,32,32,32,]),'transitionterm':([27,77,81,91,95,96,99,110,114,],[38,84,84,84,84,84,84,84,84,]),'classbody':([36,48,],[47,59,]),'method':([36,48,],[48,48,]),'alphabetdescribebody':([43,65,],[53,71,]),'paramsdescribe':([43,65,],[54,54,]),'automatondescribebody':([74,],[76,]),'statedescription':([77,81,91,99,110,114,],[80,93,100,107,115,120,]),'transition':([77,81,91,99,110,114,],[81,81,81,81,81,81,]),'transitionlist':([77,81,91,95,96,99,110,114,],[82,82,82,103,104,82,82,82,]),'transitionkeyword':([77,81,91,94,95,96,99,110,114,],[83,83,83,102,83,83,83,83,83,]),'states':([80,],[90,]),'empty':([80,106,],[92,111,]),'termstates':([106,],[109,]),'logicoperations':([112,117,],[118,122,]),'compareoperation':([112,117,128,],[119,119,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('expressions -> expression','expressions',1,'p_expressions','parse.py',252),
  ('expressions -> expression expressions','expressions',2,'p_expressions','parse.py',253),
  ('expression -> classdef','expression',1,'p_expression','parse.py',262),
  ('expression -> automaton','expression',1,'p_expression','parse.py',263),
  ('expression -> alphabet','expression',1,'p_expression','parse.py',264),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',270),
  ('alphabet -> DEF ID TYPIZATION CLASSNAME EQUALITY BLOCKSTART enumeration BLOCKEND','alphabet',8,'p_alphabet','parse.py',279),
  ('alphabet -> DEF ID TYPIZATION CLASSNAME EQUALITY CLASSNAME METHOD PARSTART enumeration PAREND','alphabet',10,'p_alphabet','parse.py',280),
  ('alphabet -> DEF ID TYPIZATION CLASSNAME EQUALITY CLASSNAME METHOD BLOCKSTART alphabetdescribebody BLOCKEND','alphabet',10,'p_alphabet','parse.py',281),
  ('enumeration -> term','enumeration',1,'p_enumeration','parse.py',295),
  ('enumeration -> term COMMA enumeration','enumeration',3,'p_enumeration','parse.py',296),
  ('term -> CHAR','term',1,'p_term','parse.py',306),
  ('term -> INT','term',1,'p_term','parse.py',307),
  ('term -> STRING','term',1,'p_term','parse.py',308),
  ('term -> ID','term',1,'p_term','parse.py',309),
  ('term -> CLASSNAME PARSTART enumeration PAREND','term',4,'p_term','parse.py',310),
  ('alphabetdescribebody -> paramsdescribe','alphabetdescribebody',1,'p_alphabetdescribebody','parse.py',320),
  ('alphabetdescribebody -> paramsdescribe COMMA alphabetdescribebody','alphabetdescribebody',3,'p_alphabetdescribebody','parse.py',321),
  ('paramsdescribe -> enumeration FROM ID','paramsdescribe',3,'p_paramsdescribe','parse.py',331),
  ('transitionterm -> CHAR','transitionterm',1,'p_transitionterm','parse.py',336),
  ('transitionterm -> INT','transitionterm',1,'p_transitionterm','parse.py',337),
  ('transitionterm -> STRING','transitionterm',1,'p_transitionterm','parse.py',338),
  ('transitionterm -> CLASSNAME PARSTART enumeration PAREND','transitionterm',4,'p_transitionterm','parse.py',339),
  ('transitionkeyword -> ELSE','transitionkeyword',1,'p_transitionkeyword','parse.py',349),
  ('transitionkeyword -> DEADEND','transitionkeyword',1,'p_transitionkeyword','parse.py',350),
  ('transitionkeyword -> ALPHABET','transitionkeyword',1,'p_transitionkeyword','parse.py',351),
  ('transitionkeyword -> ITSELF','transitionkeyword',1,'p_transitionkeyword','parse.py',352),
  ('transitionlist -> transitionterm','transitionlist',1,'p_transitionlist','parse.py',358),
  ('transitionlist -> transitionkeyword','transitionlist',1,'p_transitionlist','parse.py',359),
  ('transitionlist -> transitionterm COMMA transitionlist','transitionlist',3,'p_transitionlist','parse.py',360),
  ('transitionlist -> transitionkeyword COMMA transitionlist','transitionlist',3,'p_transitionlist','parse.py',361),
  ('transition -> transitionlist ARROW ID','transition',3,'p_transition','parse.py',370),
  ('transition -> transitionlist ARROW transitionkeyword','transition',3,'p_transition','parse.py',371),
  ('automaton -> DEF ID TYPIZATION CLASSNAME EQUALITY CLASSNAME METHOD PARSTART ID PAREND METHOD BLOCKSTART automatondescribebody BLOCKEND','automaton',14,'p_automaton','parse.py',377),
  ('automatondescribebody -> START statedescription states TERMINAL BLOCKSTART termstates BLOCKEND','automatondescribebody',7,'p_automatondescribebody','parse.py',384),
  ('statedescription -> transition statedescription','statedescription',2,'p_statedescription','parse.py',391),
  ('statedescription -> transition','statedescription',1,'p_statedescription','parse.py',392),
  ('states -> states ID statedescription','states',3,'p_states','parse.py',404),
  ('states -> ID statedescription','states',2,'p_states','parse.py',405),
  ('states -> empty','states',1,'p_states','parse.py',406),
  ('termstates -> termstates ID statedescription','termstates',3,'p_termstates','parse.py',420),
  ('termstates -> ID statedescription','termstates',2,'p_termstates','parse.py',421),
  ('termstates -> empty','termstates',1,'p_termstates','parse.py',422),
  ('classdef -> CLASS CLASSNAME PARSTART fields PAREND TYPIZATION CLASSNAME BLOCKSTART classbody BLOCKEND','classdef',10,'p_classdef','parse.py',434),
  ('field -> ID TYPIZATION CLASSNAME','field',3,'p_field','parse.py',439),
  ('field -> ID TYPIZATION CLASSNAME EQUALITY transitionterm','field',5,'p_field','parse.py',440),
  ('fields -> field','fields',1,'p_fields','parse.py',449),
  ('fields -> field COMMA fields','fields',3,'p_fields','parse.py',450),
  ('classbody -> method','classbody',1,'p_classbody','parse.py',459),
  ('classbody -> method classbody','classbody',2,'p_classbody','parse.py',460),
  ('method -> OVERRIDE FUN ID PARSTART fields PAREND TYPIZATION CLASSNAME BLOCKSTART RETURN PARSTART logicoperations PAREND BLOCKEND','method',14,'p_method','parse.py',469),
  ('compareoperation -> ID METHOD COMPAREOPERATOR ID METHOD','compareoperation',5,'p_compareoperation','parse.py',474),
  ('logicoperations -> compareoperation','logicoperations',1,'p_logicoperations','parse.py',479),
  ('logicoperations -> PARSTART logicoperations PAREND','logicoperations',3,'p_logicoperations','parse.py',480),
  ('logicoperations -> logicoperations LOGICOPERATOR PARSTART compareoperation PAREND','logicoperations',5,'p_logicoperations','parse.py',481),
]
